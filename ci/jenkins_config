pipeline {
  agent none

    environment {
      // Get rid of Read -1, expected <someNumber>, errno =1 error
      // See https://github.com/open-mpi/ompi/issues/4948
      OMPI_MCA_btl_vader_single_copy_mechanism = 'none'
      // Remove warning: "A high-performance Open MPI point-to-point 
      // messaging module was unable to find any relevant network 
      // interfaces."
      OMPI_MCA_btl_base_warn_component_unused = '0'
      // Only use two threads when using OpenMP
      OMP_NUM_THREADS = 2
    }

  stages {
    stage('Test') {
      parallel {
        stage('MAGMA') {
          agent {
            docker {
              image "rombur/mgmol-stack:20.01.0"
                alwaysPull true
                label 'nvidia-docker && volta'
            }
          }
          steps {
            sh 'rm -rf build && mkdir -p build'
              dir('build') { 
                sh '''
                  $(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/cmake \
                  -D SCALAPACK_ROOT=$(spack location -i netlib-scalapack) \
                  -D MGMOL_WITH_CLANG_FORMAT=OFF \
                  -D MGMOL_WITH_COVERAGE=OFF \
                  -D MGMOL_WITH_MAGMA=ON \
                  -D HDF5_ROOT=$(spack location -i hdf5) \
                  -D BOOST_ROOT=$(spack location -i boost) \
                  -D CMAKE_PREFIX_PATH="$(spack location -i magma);$(spack location -i openblas)"  \
                  -D CMAKE_C_COMPILER=$(spack location -i gcc@9.2.0)/bin/gcc \
                  -D CMAKE_CXX_COMPILER=$(spack location -i gcc@9.2.0)/bin/g++ \
                  -D CMAKE_Fortran_COMPILER=$(spack location -i gcc@9.2.0)/bin/gfortran \
                  -D MPI_C_COMPILER=$(spack location -i openmpi)/bin/mpicc \
                  -D MPI_CXX_COMPILER=$(spack location -i openmpi)/bin/mpicxx \
                  -D MPI_Fortran_COMPILER=$(spack location -i openmpi)/bin/mpif90 \
                  -D MPIEXEC_EXECUTABLE=$(spack location -i openmpi)/bin/mpiexec \
                  ..
                ''' 
                sh 'make -j8'
                sh '$(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/ctest --no-compress-output -T Test'
              }
          }
          post {
            always {
              xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            }
          }
        }      
        stage('CPU') {
          agent {
            docker {
              image "rombur/mgmol-stack:20.01.0"
                alwaysPull true
                label 'docker'
            }
          }
          environment {
            CODECOV_TOKEN = '80bcfd05-a1ae-4b65-b049-0ec96abad409'
          }
          steps {
            sh 'rm -rf build && mkdir -p build'
              dir('build') {
                sh '''
                  $(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/cmake \
                  -D SCALAPACK_ROOT=$(spack location -i netlib-scalapack) \
                  -D MGMOL_WITH_CLANG_FORMAT=ON \
                  -D MGMOL_WITH_COVERAGE=ON \
                  -D MGMOL_WITH_MAGMA=OFF \
                  -D HDF5_ROOT=$(spack location -i hdf5) \
                  -D BOOST_ROOT=$(spack location -i boost) \
                  -D CMAKE_PREFIX_PATH=$(spack location -i openblas) \
                  -D CMAKE_C_COMPILER=$(spack location -i gcc@9.2.0)/bin/gcc \
                  -D CMAKE_CXX_COMPILER=$(spack location -i gcc@9.2.0)/bin/g++ \
                  -D CMAKE_Fortran_COMPILER=$(spack location -i gcc@9.2.0)/bin/gfortran \
                  -D MPI_C_COMPILER=$(spack location -i openmpi)/bin/mpicc \
                  -D MPI_CXX_COMPILER=$(spack location -i openmpi)/bin/mpicxx \
                  -D MPI_Fortran_COMPILER=$(spack location -i openmpi)/bin/mpif90 \
                  -D MPIEXEC_EXECUTABLE=$(spack location -i openmpi)/bin/mpiexec \
                  .. 
                '''
                sh 'make -j8'
                sh '$(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/ctest --no-compress-output -T Test'
                sh 'make format && git diff --exit-code'
                sh 'make coverage' 
                sh 'curl -s https://codecov.io/bash -o codecov_bash_uploader && chmod +x codecov_bash_uploader && ./codecov_bash_uploader -Z -X gcov -f lcov.info'
              }
          }
          post {
            always {
              xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            }
          }      
        }
        stage('clang-sanitizer') {
          agent {
            docker {
              image "rombur/mgmol-stack:20.01.0"
                args '--cap-add SYS_PTRACE'
                alwaysPull true
                label 'docker'
            }
          }
          environment {
            ASAN_SYMBOLIZER_PATH = '/usr/lib/llvm-6.0/bin/llvm-symbolizer'
              LSAN_OPTIONS = "suppressions=$WORKSPACE/ci/address_blacklist.txt"
              ASAN_OPTIONS = 'fast_unwind_on_malloc=0'
              OMPI_C = 'clang-6.0'
              OMPI_CXX = 'clang++-6.0'
          }
          steps {
            sh 'rm -rf build && mkdir -p build'
              dir('build') {
                sh '''
                  $(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/cmake \
                  -D CMAKE_C_COMPILER=clang-6.0 \
                  -D CMAKE_CXX_COMPILER=clang++-6.0 \
                  -D SCALAPACK_ROOT=$(spack location -i netlib-scalapack) \
                  -D MGMOL_WITH_CLANG_FORMAT=OFF \
                  -D MGMOL_WITH_COVERAGE=OFF \
                  -D MGMOL_WITH_MAGMA=OFF \
                  -D HDF5_ROOT=$(spack location -i hdf5) \
                  -D BOOST_ROOT=$(spack location -i boost) \
                  -D CMAKE_PREFIX_PATH=$(spack location -i openblas) \
                  -D CMAKE_CXX_FLAGS="-Wall -pedantic -g -fsanitize=address" \
                  -D MPI_C_COMPILER=$(spack location -i openmpi)/bin/mpicc \
                  -D MPI_CXX_COMPILER=$(spack location -i openmpi)/bin/mpicxx \
                  -D MPI_Fortran_COMPILER=$(spack location -i openmpi)/bin/mpif90 \
                  -D MPIEXEC_EXECUTABLE=$(spack location -i openmpi)/bin/mpiexec \
                  .. 
                '''  
                sh 'make -j8'
                sh '$(spack location -i cmake@3.16.1%gcc@7.4.0)/bin/ctest --no-compress-output -T Test'
              }   
          }
          post {
            always {
              xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            }
          }      
        }
      }
    }
  }
}
